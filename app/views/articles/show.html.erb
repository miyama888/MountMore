<div class = "main-image">
  <div class = "container article-list">
    <div class = "article-list_article-logo">
			<h2>記事詳細</h2>
    </div>

    <div id='map' data-lat="<%= @article.latitude %>" data-lon="<%= @article.longitude %>">
    </div>

    <style>
          #map{
        height: 400px;
      }
    </style>
    <ul class="bxslider">
      <% @images.each do |image| %>
          <li>
                <%= attachment_image_tag image, :image %>
          </li>
      <% end %>
    </ul>

  <div class = "article-list_article-table">
			<table class="table table-hover table-inverse">
				<thead>
					<th></th>
				</thead>
				<tbody>
	      	<tr>
            <% @images.each  do |image| %>
      				<td>
      					<%= attachment_image_tag image, :image, :fill, 60, 60, format: 'jpeg', class: "img pull-left profile-img", fallback: "no_image.jpg" %><br>
      					<%=link_to user_path(@user.id) do%><%= @user.user_name %><% end %>
      				</td>
            <%end%>
    				<td><%#=link_to root_path(@article) do%><%= @article.title %><%# end %></td>
    				<td><%= @article.body %></td>
            <!-- いいね機能 -->
            <td id=<%= "favorite_#{@article.id}" %> >
              <%= render 'favorites/favorite', article: @article %>
            </td>
            <!-- コメント数表示 -->
          <td>
            コメント数:<%= @article.article_comments.count %>
          </td>
          <!-- 投稿者のみ編集と削除を許可 -->
    				<% if  @user.id == current_user.id %>
				      <td><%= link_to "編集", edit_article_path(@article), class: "btn-sm btn-success" %></td>
    				  <td><%= link_to "削除する", article_path(@article), method: :delete, "data-confirm" => "本当に消しますか？", class: "btn-sm btn-danger" %></td>
    			   <% end %>
        	</tr>
				</tbody>
			</table>
    </div>

    <!-- 記事に対してのコメントを表示 -->
      <table class="table table-hover table-inverse">
        <tbody>
          <tr>
            <% @article.article_comments.each do |article_comment| %>
              <td>
              <%#= link_to user_path(article_comment.user) do%><%#= attachment_image_tag article_comment.user, :profile_image, :fill, 60, 60, format: 'jpeg', class: "img pull-left profile-img", fallback: "no_image.jpg" %>
              <%= article_comment.user.user_name %>
              </td>
              <td>
                <%= article_comment.comment %>
              </td>
              <!-- コメント主のみ削除可能 -->
              <% if article_comment.user == current_user %>
                <td>
                  <%= link_to "削除する", article_article_comment_path(article_comment.article, article_comment), method: :delete, class: "btn btn-danger pull-right" %>
                </td>
              <% end %>
            <%end%>
          </tr>
          <%# end %>
        </tbody>
      </table>
      <!-- 記事に対するコメントをする。 -->
      <%= form_for [@article, @article_comment] do |f| %>
            <div class = "field">
              <h2>記事へコメント</h2>
            </div>
            <div class= "field row">
              <%= f.text_area :comment, class: "col-xs-12" %>
            </div>
            <div class = "actions row">
              <%= f.submit "コメントする", class: "btn btn-primary col-xs-12" %>
            </div>
      <% end %>
  </div>
</div>
<script src="https://maps.googleapis.com/maps/api/js?key=<%=ENV["GOOGLE_MAP_KEY"]%>&callback=initMap" defer></script>
<script>
/*
mapを関数の外で定義(codeAddressでも使うため)
geocoderを用意
*/
const mapElement = document.getElementById('map')
const latitude = parseFloat(mapElement.dataset.lat)
const longitude = parseFloat(mapElement.dataset.lon)
let map
        // google.maps.MarkerでGoogleMap上の指定位置にマーカが立つ
        // google.maps.Markerインスタンスを生成
        // var marker = new google.maps.Marker({
        //   map: map,
        //   position: results[0].geometry.location
        // });

function initMap(){
  map = new google.maps.Map(document.getElementById('map'), {
  center: {lat: latitude, lng: longitude},
  zoom: 8
  });
 // 保存された地図情報からピンをさす

    // google.maps.LatLngインスタンスを生成
    pos = new google.maps.LatLng(
    latitude, //latitude
    longitude //longitude
    );
    default_marker = new google.maps.Marker({
    map: map,
    position: pos,
    icon: {
    url: ' https://maps.google.com/mapfiles/ms/icons/green-dot.png', //アイコンのURL
    scaledSize: new google.maps.Size(40, 40) //サイズ
    }
    });
}
</script>
<!-- 写真複数投稿 -->
<script>
  // idについてクリック等のイベントが生じたら、eいかを実行せよという命令。e＝イベント情報を示す。EventListenerとは、イベントを拾う（今回でいうclick）
  document.getElementById('post').addEventListener('click',(e)=>{
    e.preventDefault();
    document.getElementById('new_article').name = 'new_article'
    // formに強制的にnew_articleと任意の名前を付与
    // preventDefault()=クリックイベントを無効化。無効化しないと無条件にデータを送信してします。
    var files = document.getElementById("article_image").files;
    // <div><h1>は全てElement。なので、article_imageという名前がついたid(Element)を呼び出す
    // lengthが選んだファイルの数。lengthで数え上げている。filesがhtml上の選択ボックスのtype
    if(files.length>5){
      alert('画像ファイルは5枚以内で投稿して下さい')
    }
    else{
       document.new_article.submit()
       // このnew_articleは5行目で任意につけたフォーム。このdocument.form.submit()で、preventDefault();で無効化したものを再度有効化している。
    }
  });
</script>