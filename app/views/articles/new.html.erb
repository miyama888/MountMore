<div class = "container" >
  <% if @article.errors.any? %>
        <div id="error_explanation">
          <h2><%= pluralize(@article.errors.count, "件のエラー") %> により保存できません:</h2>
          <ul>
            <% @article.errors.full_messages.each do |message| %>
              <li><%= message %></li>
            <% end %>
          </ul>
        </div>
  <% end %>

	  <div class = "row" >
      <div class = "col-md-12 article-list">
	      <h1>記事投稿</h1>
        <div class ="article-list_article-new">
          <%= form_for(@article, url:articles_path, html: {id: 'post_article'}) do |f| %>
          <%= f.hidden_field :latitude, id: 'form_latitude' %>
          <%= f.hidden_field :longitude, id: 'form_longitude' %>
          <%= f.label :area_id, "地方名" %><br>
          <%= f.collection_select :area_id, Area.all, :id, :area_name, class: "col-xs-12", id: 'article_area_id' %><br>
            <div class = "prefecture">
              <%= render partial: 'select_prefecture', locals: {area_id: Area.first.id}, class: "col-xs-12"%>
            </div>
              <label >タイトル</label>
              <%= f.text_field :title, class: "col-xs-12" %><br>
              <label>内容</label>
              <%= f.text_area :body, class: "col-xs-12 text" %><br>
              <label>写真（３枚以内）</label>
            <div class="alert alert-danger">
              <%= f.attachment_field :article_images_images, multiple: true, id: "article_image" %>
            </div>
              <h2>地図検索</h2>
              <h5>住所または郵便番号を入力し実行してください</h5>
              <!-- 地名入力用のinputを追加 -->
              <input id="address" type="textbox" value="">

              <!-- buttonをクリックしたらcodeAddressを実行　-->
              <input type="button" value="実行" onclick="codeAddress()">
              <div id='map'></div>
              <%= f.submit "記事を投稿する", class: "btn btn-primary btn-lg btn-block", id: 'post'%>
          <%end%>
        </div>
      </div>
    </div>
</div>

<script>
/*
mapを関数の外で定義(codeAddressでも使うため)
geocoderを用意
*/

let map
let geocoder
let marker = false
function initMap(){
  // geocoderを初期化
  geocoder = new google.maps.Geocoder()

  map = new google.maps.Map(document.getElementById('map'), {
  center: {lat: 35.667875, lng: 138.226475},
  zoom: 8
  });
}

function codeAddress(){
  // 入力を取得
  let inputAddress = document.getElementById('address').value;

  // geocodingしたあとmapを移動
  geocoder.geocode( { 'address': inputAddress}, function(results, status) {
    if (status == 'OK') {
　　　　　　　　　　　　// map.setCenterで地図が移動
      map.setCenter(results[0].geometry.location);
                    // 検索を再度実行時にマーカーが既にあれば先に立てたマーカーは削除
      if (marker != false){marker.setMap(null)}
　　　　　　　　　　　　// google.maps.MarkerでGoogleMap上の指定位置にマーカが立つ
       marker = new google.maps.Marker({
          map: map,
          position: results[0].geometry.location
      });

      var latForm = document.getElementById('form_latitude')
      latForm.value = results[0].geometry.location.lat()
      var lngForm = document.getElementById('form_longitude')
      lngForm.value = results[0].geometry.location.lng()
    } else {
      alert('次の理由でジオコードが成功しませんでした: ' + status);
    }
  });
}
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%=ENV["GOOGLE_API_KEY"]%>&callback
=initMap" async defer></script>

<!-- 写真複数投稿 -->
<script>
  document.getElementById('post').addEventListener('click',(e)=>{
    e.preventDefault();
    document.getElementById('post_article').name = 'post_article'
    // formに強制的にpost_articleと任意の名前を付与
    // preventDefault()=クリックイベントを無効化。無効化しないと無条件にデータを送信
    var files = document.getElementById("article_image").files;
    // <div><h1>は全てElement。なので、article_imageという名前がついたid(Element)を呼び出す
    // lengthが選んだファイルの数。lengthで数え上げている。filesがhtml上の選択ボックスのtype
    if(files.length>3){
      alert('画像ファイルは3枚以内で投稿して下さい')
    }
    else{
       document.post_article.submit()
    }
  });
</script>